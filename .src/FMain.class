' Gambas class file

'
' Solanum
' Gestion de cultivos
'
' Copyright (C) Martín Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'

Public strGridState As String
Public tobCurrent As ToolButton
Public strAction As String
Public strPlotIdx As String
Public strCycleIdx As String
Public strPlantIdx As String

'Public strPlant As String

Public Sub Form_Open()

  Me.Width = 1280
  Me.Height = 720
  HSplit1.Layout = [1, 5]

  LoadTreeView()
  LoadVegetables()
  LoadFilterAndOrder()

End

' ///// Menu //////////////////////////////////////////////////////
Public Sub mnuOpen_Click()

End

Public Sub mnuNew_Click()

  cmdPlot()

End

Public Sub mnuQuit_Click()

  Me.Close

End

Public Sub mnuProperties_Click()

End

Public Sub mnuPreferences_Click()

End

Public Sub mnuAbout_Click()

  FAbout.Show()

End

Public Sub mnuHelp_Click()

End

' ///// Botones //////////////////////////////////////////////////////
Public Sub tobOpen_Click()

End

Public Sub tobNew_Click()

  cmdPlot()

End

Public Sub tobPlot_Click()

End

Public Sub tobPreferences_Click()

  FConfig.Show()

End

Public Sub tobAbout_Click()

  FAbout.Show()

End

Public Sub tobHelp_Click()

End

Public Sub tobQuit_Click()

  Me.Close

End

' ///// Ordenes //////////////////////////////////////////////////////

Public Sub cmdOpen()

  ' etste tendria que abrir un selector de una lista de los proyectos que existen

End

Public Sub cmdPlot(Optional intPlot As Integer) '' Abre el formularo de edicion de registros de la base de datos para la tabla "plots" parcelas, ya que pueden gestionarse varias parcelas o la misma parcela pero diferente ciclo (año).

  If intPlot = Null Then ' Se creara una nueva parcela
    FData.RunEditor(MStarter.conProgram, "plots")
  Else
    FData.RunEditor(MStarter.conProgram, "plots", intPlot)
  Endif

End

'//// Ajustes visuales del menu //////////////////////////////////////////

Public Sub LoadFilterAndOrder()

  mnuShowFilters.Value = MStarter.stxProgram[8]

  Select MStarter.stxProgram[8]
    Case "yes"
      pnlDataFilter.Visible = True
      mnuShowFilters.Checked = True
      mnuShowFilters.Text = ("Ocultar la barra de filtro")
    Case "no"
      pnlDataFilter.Visible = False
      mnuShowFilters.Checked = False
      mnuShowFilters.Text = ("Mostrar la barra de filtro")
  End Select

  mnuShowOrders.Value = MStarter.stxProgram[9]

  Select MStarter.stxProgram[9]
    Case "yes"
      pnlDataOrder.Visible = True
      mnuShowOrders.Checked = True
      mnuShowOrders.Text = ("Ocultar la barra de orden")
    Case "no"
      pnlDataOrder.Visible = False
      mnuShowOrders.Checked = False
      mnuShowOrders.Text = ("Mostrar la barra de orden")
  End Select

  Select MStarter.stxProgram[7]
    Case "yes"
      pnlDataSquare.Visible = True
      mnuShowSquares.Text = ("Ocultar la parcela")
    Case "no"
      pnlDataSquare.Visible = False
      mnuShowSquares.Text = ("Mostrar la parcela")
  End Select

End

' ///// Tree //////////////////////////////////////////////////////

Public Sub LoadTreeView()

  '  Dim intTree As Integer
  Dim str As String
  Dim res As Result
  Dim strParent As String
  ' Dim strParentKey As String
  Dim strCycleKey As String
  Dim strCycleText As String

  Dim strPlotText As String
  Dim strPlotKey As String
  Dim picPlot As Picture

  Dim strPlantText As String
  Dim strPlantKey As String
  Dim picPlant As Picture

  str = "select * from view_blocks"
  res = MStarter.conProgram.Exec(str)

  strParent = "application#" & Application.Name

  trvEntities.Add(strParent, Application.Name, Picture["icon:/16/internet"])

  While res.Available

    strCycleKey = "cycles#" & res["blockcycleidx"]
    strCycleText = res["blockcycle"]
    If trvEntities.Exist(strCycleKey) = False Then
      trvEntities.Add(strCycleKey, strCycleText, Picture["icon:/16/calendar"], strParent)
    Endif

    strPlotKey = "plots#" & res["blockplotidx"]
    If trvEntities.Exist(strPlotKey) = False Then
      strPlotText = res["blockplot"]
      picPlot = Picture["icon:/16/office"]
      trvEntities.Add(strPlotKey, strPlotText, picPlot, strCycleKey)
    Endif

    strPlantKey = "plants#" & res["blockplantidx"]
    If trvEntities.Exist(strPlantKey) = False Then
      strPlantText = res["blockplant"]
      picPlant = Picture["icon:/16/flag"]
      trvEntities.Add(strPlantKey, strPlantText, picPlant, strPlotKey)
    Endif

    res.MoveNext
  Wend

End

' ///// Barra de vegetales //////////////////////////////////////////

Public Sub LoadVegetables()

  Dim strPlants As String
  Dim resPlants As Result
  Dim tob As ToolButton
  Dim strVName As String

  strPlants = "select * from plants"
  resPlants = MStarter.conProgram.Exec(strPlants)

  pnlVegetables.Children.Clear

  tob = New ToolButton(pnlVegetables) As "tobVegetable"
  tob.Name = "Erase"
  tob.Tag = "Erase"
  tob.Tooltip = ("Quitar planta")
  tob.Width = 28
  tob.Height = 28
  tob.Expand = True
  tob.Toggle = True
  If strAction = "Erase" Then
    tob.Value = True
  Endif
  tob.Picture = Picture["icon:/22/delete"]

  While resPlants.Available
    strVName = String.LCase(resPlants["plantname"])
    strVName = MValidator.NoAcent(strVName)

    tob = New ToolButton(pnlVegetables) As "tobVegetable"
    tob.Name = resPlants["plantidx"]
    tob.Tag = strVName
    tob.Tooltip = resPlants["plantname"]
    tob.Width = 28
    tob.Height = 28
    tob.Expand = True
    tob.Toggle = True
    If strAction = strVName Then
      tob.Value = True
    Endif
    If Exist("pic/" & strVName & ".png") Then
      tob.Picture = Picture["pic/" & strVName & ".png"]
    Else
      tob.Text = resPlants["plantidx"]
    Endif

    resPlants.MoveNext
  Wend

End

' ///// Grid //////////////////////////////////////////////////////

Public Sub grwData_Data(Row As Integer, Column As Integer)

  If MStarter.resProgram.Available Then

    MStarter.resProgram.MoveTo(Row)

    grwData.Data.Text = MStarter.resProgram[MStarter.resProgram.Fields[Column].Name]

  Else
    grwData.Data.Text = ""
  Endif

End

Public Sub trvEntities_Select()

  Dim intFld As Integer
  Dim strEntity As String
  Dim strEKey As String
  Dim strKeyText As String
  Dim intx As Integer
  Dim strSQL As String

  strKeyText = trvEntities.Current.Key
  lblInformation.Text = trvEntities.Current.Key
  strGridState = "loading"

  If InStr(trvEntities.Current.Key, "#") Then
    strEntity = Split(trvEntities.Current.Key, "#")[0]
    strEKey = Split(trvEntities.Current.Key, "#")[1]

    Select strEntity
      Case "application"
        MStarter.stxProgram[4] = strEntity
        Print "Entidad: " & strEntity & " Clave: " & strEKey
      Case "cycles"
        MStarter.stxProgram[4] = strEntity
        Print "Entidad: " & strEntity & " Clave: " & strEKey
      Case "plots" ' Esta es la entidad que desencadena el SQL para la parcela seleccionada.
        MStarter.stxProgram[4] = "view_blocks"
        Print "Entidad: " & strEntity & " Clave: " & strEKey
        ' Por lo tanto tendremos una sentencia SQL y un resultado
        strPlotIdx = strEKey
        strCycleIdx = Split(trvEntities.Current.ParentKey, "#")[1]

        strSQL = "select * from view_blocks where blockplotidx='" & strPlotIdx & "' and blockcycleidx='" & strCycleIdx & "' order by blockcode"
        MStarter.stxProgram[5] = strSQL
        MStarter.resProgram = MStarter.conProgram.Exec(strSQL)
        ' Y tambien las medidas de la parcela
        UpdateGrid()
        UpdatePlot()

      Case "plants"
        MStarter.stxProgram[4] = strEntity
        Print "Entidad: " & strEntity & " Clave: " & strEKey
    End Select
  Endif

  Select MStarter.stxProgram[4]

    Case "view_blocks"
      MStarter.stxFieldsViewCurrent.Clear

      For intFld = 0 To MStarter.stxViewFields.Max
        If MStarter.stxViewFields[intFld][0] = "view_blocks" Then
          MStarter.stxFieldsViewCurrent.Add(MStarter.stxViewFields[intFld][1])
        Endif
      Next

      strGridState = "loading"

      If UpdateGrid() = 1 Then
        If strGridState = "loaded" Then
          cmdArrangeButtonOrders(MStarter.stxFieldsViewCurrent)
          cmdArrangeButtonFilters()

          For intx = 0 To MStarter.stxViewsEx.Max
            If MStarter.stxViewsEx[intx][0] = MStarter.stxProgram[4] Then
              MStarter.stxProgram[7] = MStarter.stxViewsEx[intx][1]
            Endif
          Next
          tobImport.Enabled = True
          tobImport.Tooltip = ("Importar") & " " & MStarter.stxProgram[7]

          tobExport.Enabled = True
          tobExport.Tooltip = ("Exportar") & " " & MStarter.stxProgram[7]
        Endif
      Endif
  End Select

End

Public Function UpdateGrid() As Integer

  Dim intFld As Integer
  Dim int As Integer

  grwData.Header = 1 ' Muestra solo el encabezado
  grwData.ScrollBar = 3 ' Muestra los scrol vertical y horizontal
  grwData.Mode = Select.Multiple

  grwData.Rows.Count = 0

  If MStarter.resProgram.Available Then
    If MStarter.resProgram.Count > 0 Then
      grwData.Rows.Count = 0
      grwData.Rows.Count = MStarter.resProgram.Count
    Endif
  Endif

  grwData.Columns.Count = MStarter.resProgram.Fields.Count

  intFld = 0

  For int = 0 To MStarter.stxViewFields.Max

    If MStarter.stxViewFields[int][0] = MStarter.stxProgram[4] Then

      grwData.Columns[intFld].Title = MStarter.stxViewFields[int][10]

      Select MStarter.stxViewFields[int][6]
        Case ""
          MStarter.stxViewFields[int][6] = 75
      End Select
      strGridState = "loading"
      grwData.Columns[intFld].Width = MStarter.stxViewFields[int][6]
      Inc intFld

    Endif

  Next

  If strGridState = "loading" Then
    strGridState = "loaded"
  Endif

  Print MStarter.stxProgram[5]

  Return 1

End

Public Function UpdatePlot() As Integer

  'Dim intFld As Integer
  'Dim int As Integer
  Dim IntUnit As Integer
  Dim intLong As Integer  ' Cantidad de bloques en X
  Dim intX As Integer ' Numero de bloque en X
  Dim intPx As Integer ' Posición del bloque en X

  Dim intWidth As Integer  ' Cantidad de bloques en Y
  Dim intY As Integer ' Numero de bloque en Y
  Dim intPy As Integer ' Posición del bloque en Y

  Dim pnl As Panel
  Dim tob As ToolButton
  Dim strCode As String
  Dim stxCode As New String[]
  Dim intH As Integer
  Dim intV As Integer
  Dim intQ As Integer
  Dim resTmp As Result
  Dim strPic As String

  resTmp = MStarter.resProgram
  'strPic = "pic/" & "suelo1.png"

  IntUnit = 22
  stxCode = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]

  If MStarter.resProgram.Available Then
    If MStarter.resProgram.Count > 0 Then

      intLong = CInt(MStarter.resProgram["blockplotx"])
      intWidth = CInt(MStarter.resProgram["blockploty"])

      pnlDataSquare.Width = intWidth * IntUnit * 3
      pnlDataSquare.Height = intWidth * IntUnit * 3
      'pnlDataSquare.Arrangement = Arrange.Row
      pnlDataSquare.ScrollBar = Scroll.Both

      intPy = 0
      pnlDataSquare.Children.Clear
      For intY = 0 To intWidth - 1
        intPx = 0
        For intX = 0 To intLong - 1
          pnl = New Panel(pnlDataSquare)
          pnl.Name = stxCode[intX] & stxCode[intY]
          pnl.Width = IntUnit * 3
          pnl.Height = IntUnit * 3
          'pnl.Background = Color.Blue
          pnl.Border = Border.Plain
          pnl.Arrangement = Arrange.None
          pnl.Left = intPx
          pnl.Top = intPy
          intPx = intPx + (IntUnit * 3)
          intQ = 0
          For intV = 0 To 2
            For intH = 0 To 2
              tob = New ToolButton(pnl) As "block"
              strCode = stxCode[intX] & stxCode[intY] & CStr(intQ) 'CStr(intH + intV)
              tob.Name = strCode
              tob.Text = "" 'CStr(intQ) 'CStr(intH + intV + intQ)
              tob.Tag = strCode
              tob.Expand = True
              tob.Tooltip = ("Suelo")
              tob.Picture = Picture["pic/" & "suelo1.png"]

              resTmp.MoveFirst

              While resTmp.Available
                If resTmp["blockplotidx"] = strPlotIdx Then
                  If resTmp["blockcycleidx"] = strCycleIdx Then
                    If resTmp["blockcode"] = strCode Then
                      'Select resTmp["blockplant"]
                      '  Case ""
                      '    strPic = "pic/" & "suelo1.png"
                      '  Case Else
                      strPic = "pic/" & String.LCase(resTmp["blockplant"]) & ".png"
                      'End Select
                      If Exist(strPic) Then
                        tob.Picture = Picture[strPic]
                        tob.Tooltip = (resTmp["blockplant"])
                        tob.Text = ""
                        'Break
                      Endif
                    Endif
                  Endif
                Endif
                resTmp.MoveNext
              Wend

              tob.Width = IntUnit
              tob.Height = IntUnit
              tob.Left = IntUnit * intH
              tob.Top = IntUnit * intV
              Inc intQ
            Next
            'Inc intQ ' = intQ + 2
          Next

        Next
        intPy = intPy + (IntUnit * 3)
      Next
    Endif
  Endif
  Return 1

End

Public Sub grwData_ColumnResize(Column As Integer)

  Dim intY As Integer

  If strGridState = "loaded" Then

    Select MStarter.stxViews.Find(MStarter.stxProgram[4])
      Case -1
        Message.Info(("La vista que intenta guardar no esta configurada adecuadamente.") & gb.NewLine & ("Contacte al desarrollador del programa para reportar el error."))
      Case Else
        For intY = 0 To MStarter.stxViewFields.Max
          If MStarter.stxViewFields[intY][0] = MStarter.stxProgram[4] Then
            If MStarter.stxViewFields[intY][1] = MStarter.stxFieldsViewCurrent[Column] Then
              MStarter.stxViewFields[intY][6] = CStr(grwData.Columns[Column].Width)
            Endif
          Endif

        Next

        Wait 0.01

        If strGridState = "loaded" Then
          cmdArrangeButtonOrders(MStarter.stxFieldsViewCurrent)
          cmdArrangeButtonFilters()
        Endif

    End Select
  Endif

End

Public Sub cmdArrangeButtonFilters()

  Dim btnFilter As Button

  pnlDataFilter.Children.Clear
  pnlDataFilter.Arrangement = Arrange.Fill

  btnFilter = New Button(pnlDataFilter) As "GFilterType"

  With btnFilter
    .Name = "btnFilter~" & "OnWorking" '& stxButtonsFields[intA]
    .Border = False
    .Picture = Picture["icon:/16/filter"]
    .Text = ("Los filtros todavía no están implementados")
    .Tag = 0
    .Expand = True
    .Width = pnlDataFilter.Width
    .Height = pnlDataFilter.Height
  End With

End

Public Sub cmdArrangeButtonOrders(stxButtonsFields As String[])

  Dim pnlOrder As Panel
  Dim btnOrder As Button
  Dim intView As Integer
  Dim intA, intB, intXbtn As Integer
  Dim stxFieldInfoTmp As New String[]

  stxFieldInfoTmp.Clear
  pnlDataOrder.Children.Clear
  For intView = 0 To MStarter.stxViewFields.Max
    If MStarter.stxViewFields[intView][0] = MStarter.stxProgram[4] Then
      intA = MStarter.stxFieldsViewCurrent.Find(MStarter.stxViewFields[intView][1]) ' Busco el campo en la lista
      If intA > -1 Then
        pnlOrder = New Panel(pnlDataOrder)
        With pnlOrder
          .Name = "pnlOrder~" & stxButtonsFields[intA]
          .Tag = intA
          .Height = pnlDataOrder.Height - 2
          .Width = grwData.Columns[intA].Width
          Select intA
            Case 0
              intXbtn = 0
            Case Else
              intXbtn = 0
              For intB = 0 To intA - 1
                intXbtn = intXbtn + grwData.Columns[intB].Width
              Next
          End Select
          .X = intXbtn
          .Y = 0
          .Arrangement = Arrange.Vertical
        End With
        btnOrder = New Button(pnlOrder) As "GOrderType"
        With btnOrder
          .Name = "btnOrder~" & stxButtonsFields[intA]
          .Border = True
          .Tag = intA
          Select MStarter.stxViewFields[intView][3] ' Tipo de orden
            Case "asc"
              .Picture = Picture["icon:/16/sort-ascent"]
            Case "desc"
              .Picture = Picture["icon:/16/sort-descent"]
            Case ""
              .Picture = Null
          End Select
          .Expand = True
          .Width = pnlOrder.Height
          .Height = pnlOrder.Height
        End With
      Endif
    Endif
  Next

End

Public Sub GOrderType_Click()

  Dim btn As Button
  Dim int As Integer
  Dim intColumn As Integer
  Dim strFieldName As String

  btn = Last
  intColumn = CInt(btn.Tag)
  strFieldName = MStarter.stxFieldsViewCurrent[intColumn]

  For int = 0 To MStarter.stxViewFields.Max
    If MStarter.stxViewFields[int][0] = MStarter.stxProgram[4] Then
      If MStarter.stxViewFields[int][1] = strFieldName Then

        Select btn.Picture
          Case Null
            btn.Picture = Picture["icon:/16/sort-ascent"]
            MStarter.stxViewFields[int][3] = "asc"

          Case Picture["icon:/16/sort-ascent"]
            btn.Picture = Picture["icon:/16/sort-descent"]
            MStarter.stxViewFields[int][3] = "desc"

          Case Picture["icon:/16/sort-descent"]
            btn.Picture = Null
            MStarter.stxViewFields[int][3] = ""
        End Select
      Endif
    Endif
  Next

  UpdateGrid()

End

Public Sub grwData_Scroll()

  pnlDataFilter.ScrollX = grwData.ScrollX

End

Public Sub grwData_DblClick()

  cmdRecordEdit()

End

Public Sub cmdRecordNew()

  Dim strTable As String

  strTable = Replace(MStarter.stxProgram[4], "view_", "")

  FData.RunEditor(MStarter.conProgram, strTable)

End

Public Sub cmdRecordEdit()

  Dim intKey As Integer
  Dim strTable As String

  strTable = Replace(MStarter.stxProgram[4], "view_", "")

  If grwData.Current Then
    intKey = CInt(grwData[grwData.Row, 0].Text)
    FData.RunEditor(MStarter.conProgram, strTable, intKey)
  Else
    Message.Info("Debe seleccionar un registro de la lista")
  Endif

End

Public Sub cmdRecordDelete()

  Dim intKey As Integer
  Dim intCount As Integer
  Dim intOk As Integer
  Dim intR As Integer
  Dim strTable As String

  strTable = Replace(MStarter.stxProgram[4], "view_", "")

  For intR = 0 To grwData.Rows.Max
    If grwData.Rows[intR].Selected = True Then
      Inc intCount
      intKey = CInt(grwData[intR, 0].Text)
      If MData.RecordDelete(MStarter.conProgram, strTable, MStarter.stxTableFields, intKey) = -1 Then
        Inc intOk
      Endif
    Endif
  Next

  If intCount > 0 Then
    If intOk = intCount Then
      UpdateGrid()
    Else
      Select intOk
        Case 0
          Message.Info("No se pudo borrar ningun registro")
        Case Else
          Message.Info("Hay registros que no se pudieron borrar")
      End Select
    Endif
    UpdateGrid()
  Else
    Message.Info("Debe seleccionar registros de la lista")
  Endif

End

Public Sub mnuShowOrders_Click()

  If mnuShowOrders.Value = False Then
    MStarter.stxProgram[9] = "no"
  Else
    MStarter.stxProgram[9] = "yes"
  Endif

  Print MStarter.stxProgram[9]

  Select MStarter.stxProgram[9]
    Case "yes"
      pnlDataOrder.Visible = True
      mnuShowOrders.Text = ("Ocultar la barra de orden")
    Case "no"
      pnlDataOrder.Visible = False
      mnuShowOrders.Text = ("Mostrar la barra de orden")

  End Select

End

Public Sub mnuShowFilters_Click()

  If mnuShowFilters.Value = False Then
    MStarter.stxProgram[8] = "no"
  Else
    MStarter.stxProgram[8] = "yes"
  Endif

  Print MStarter.stxProgram[8]

  Select MStarter.stxProgram[8]
    Case "yes"
      pnlDataFilter.Visible = True
      mnuShowFilters.Text = ("Ocultar la barra de filtro")
    Case "no"
      pnlDataFilter.Visible = False
      mnuShowFilters.Text = ("Mostrar la barra de filtro")
  End Select

End

Public Sub tobNewRecord_Click()

  cmdRecordNew()

End

Public Sub tobSaveRecord_Click()

End

Public Sub tobDeleteRecord_Click()

  cmdRecordDelete()

End

Public Sub tobEditRecord_Click()

  cmdRecordEdit()

End

Public Sub mnuShowSquares_Click()

  If mnuShowSquares.Value = False Then
    MStarter.stxProgram[8] = "no"
  Else
    MStarter.stxProgram[8] = "yes"
  Endif

  Print MStarter.stxProgram[8]

  Select MStarter.stxProgram[8]
    Case "yes"
      pnlDataSquare.Visible = True
      mnuShowSquares.Text = ("Ocultar la parcela")
    Case "no"
      pnlDataSquare.Visible = False
      mnuShowSquares.Text = ("Mostrar la parcela")
  End Select

End

Public Sub block_MouseDown()

  Dim tob As ToolButton
  Dim resAdd As Result
  Dim resChk As Result
  Dim intKey As Integer
  Dim resDelete As Result
  Dim strChk As String
  Dim resEdit As Result

  tob = Last
  strChk = "select * from view_blocks "
  strChk &= " where blockplotidx = '" & strPlotIdx & "' and blockcycleidx='" & strCycleIdx & "' and blockcode='" & tob.Tag & "'"
  resChk = MStarter.conProgram.Exec(strChk)

  If resChk.Available Then
    If resChk.Count = 1 Then
      intKey = CInt(resChk["blockidx"])
    Else
      intKey = 0
    Endif
  Else
    intKey = 0
  Endif

  Select Mouse.Button

    Case 1 ' Boton izquierdo

      Select strAction
        Case ""  '///////////////////////////////////////////////////////////////
          Message.Info(("Seleccione un tipo de planta por favor"))
        Case "Erase" '///////////////////////////////////////////////////////////
          tob.Text = ""
          tob.Picture = Picture["pic/suelo1.png"]
          tob.Tooltip = ("Suelo")
          'En este caso hay que borrar el registro de la tabla blocks
          Print tob.Tag

          If intKey > 0 Then
            MStarter.conProgram.Delete("blocks", "blockidx=&1", intKey)
          Endif

        Case Else

          If Exist("pic/" & strAction & ".png") Then
            tob.Text = ""
            tob.Picture = Picture["pic/" & strAction & ".png"]
          Else
            tob.Text = strPlantIdx
            tob.Picture = Null
          Endif

          tob.Tooltip = strAction

          Select intKey
            Case 0 'En este caso hay que agregar un registro en la tabla blocks ya que no existe.

              resAdd = MStarter.conProgram.Create("blocks")
              resAdd["blockplot"] = strPlotIdx
              resAdd["blockcycle"] = strCycleIdx
              resAdd["blockcode"] = tob.Tag
              resAdd["blockplant"] = strPlantIdx
              resAdd.Update
            Case Else 'En este caso hay que EDITAR un registro existente de la tabla blocks.
              resEdit = MStarter.conProgram.Edit("blocks", "blockidx=&1", intKey)
              resEdit["blockplant"] = strPlantIdx
              resEdit.Update

          End Select

          If UpdateGrid() = 1 Then
            Print tob.Tag
          Endif

      End Select
      tob.Expand = True
      tob.Refresh

    Case 2 ' Boton derecho, información de la planta

      Print Tob.Tag

  End Select

End

Public Sub tobVegetable_MouseDown()

  Dim tob As ToolButton

  tob = Last
  strAction = CStr(tob.Tag)
  strPlantIdx = tob.Name
  'strPlant = tob.Tag

  LoadVegetables()

End

Public Sub tobReportPlants_Click()

End
